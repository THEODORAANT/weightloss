import * as csstree from 'css-tree';
import { type AnchorPositions, type TryBlock } from './parse.js';
import { type AcceptedPositionTryProperty } from './syntax.js';
import { type StyleData } from './utils.js';
type FallbackTargets = Record<string, string[]>;
declare const POSITION_AREA_PROPS: readonly ["left", "center", "right", "span-left", "span-right", "x-start", "x-end", "span-x-start", "span-x-end", "x-self-start", "x-self-end", "span-x-self-start", "span-x-self-end", "span-all", "top", "bottom", "span-top", "span-bottom", "y-start", "y-end", "span-y-start", "span-y-end", "y-self-start", "y-self-end", "span-y-self-start", "span-y-self-end", "block-start", "block-end", "span-block-start", "span-block-end", "inline-start", "inline-end", "span-inline-start", "span-inline-end", "self-block-start", "self-block-end", "span-self-block-start", "span-self-block-end", "self-inline-start", "self-inline-end", "span-self-inline-start", "span-self-inline-end", "start", "end", "span-start", "span-end", "self-start", "self-end", "span-self-start", "span-self-end"];
type PositionAreaProperty = (typeof POSITION_AREA_PROPS)[number];
declare const POSITION_TRY_ORDERS: readonly ["normal", "most-width", "most-height", "most-block-size", "most-inline-size"];
export type PositionTryOrder = (typeof POSITION_TRY_ORDERS)[number];
declare const POSITION_TRY_TACTICS: readonly ["flip-block", "flip-inline", "flip-start"];
export type PositionTryOptionsTryTactics = (typeof POSITION_TRY_TACTICS)[number];
interface PositionTryDefTactic {
    type: 'try-tactic';
    tactics: PositionTryOptionsTryTactics[];
}
interface PositionTryDefPositionArea {
    type: 'position-area';
    positionArea: PositionAreaProperty;
}
interface PositionTryDefAtRule {
    type: 'at-rule';
    atRule: csstree.Identifier['name'];
}
interface PositionTryDefAtRuleWithTactic {
    type: 'at-rule-with-try-tactic';
    tactics: PositionTryOptionsTryTactics[];
    atRule: csstree.Identifier['name'];
}
type PositionTryObject = PositionTryDefTactic | PositionTryDefPositionArea | PositionTryDefAtRule | PositionTryDefAtRuleWithTactic;
export declare function isPositionAreaProp(property: string | PositionAreaProperty): property is PositionAreaProperty;
export declare function applyTryTacticsToSelector(selector: string, tactics: PositionTryOptionsTryTactics[]): Partial<Record<"height" | "width" | "left" | "top" | "bottom" | "inset" | "margin" | "right" | "position-anchor" | "inset-block-start" | "inset-block-end" | "inset-inline-start" | "inset-inline-end" | "inset-block" | "inset-inline" | "margin-block-start" | "margin-block-end" | "margin-block" | "margin-inline-start" | "margin-inline-end" | "margin-inline" | "margin-bottom" | "margin-left" | "margin-right" | "margin-top" | "min-width" | "min-height" | "max-width" | "max-height" | "block-size" | "inline-size" | "min-block-size" | "min-inline-size" | "max-block-size" | "max-inline-size" | "justify-self" | "align-self" | "place-self" | "position-area", string>> | undefined;
export declare function applyTryTacticsToAtRule(block: TryBlock, tactics: PositionTryOptionsTryTactics[]): Partial<Record<"height" | "width" | "left" | "top" | "bottom" | "inset" | "margin" | "right" | "position-anchor" | "inset-block-start" | "inset-block-end" | "inset-inline-start" | "inset-inline-end" | "inset-block" | "inset-inline" | "margin-block-start" | "margin-block-end" | "margin-block" | "margin-inline-start" | "margin-inline-end" | "margin-inline" | "margin-bottom" | "margin-left" | "margin-right" | "margin-top" | "min-width" | "min-height" | "max-width" | "max-height" | "block-size" | "inline-size" | "min-block-size" | "min-inline-size" | "max-block-size" | "max-inline-size" | "justify-self" | "align-self" | "place-self" | "position-area", string>>;
type InsetRules = Partial<Record<AcceptedPositionTryProperty, string>>;
export declare function getExistingInsetRules(el: HTMLElement): Partial<Record<"height" | "width" | "left" | "top" | "bottom" | "inset" | "margin" | "right" | "position-anchor" | "inset-block-start" | "inset-block-end" | "inset-inline-start" | "inset-inline-end" | "inset-block" | "inset-inline" | "margin-block-start" | "margin-block-end" | "margin-block" | "margin-inline-start" | "margin-inline-end" | "margin-inline" | "margin-bottom" | "margin-left" | "margin-right" | "margin-top" | "min-width" | "min-height" | "max-width" | "max-height" | "block-size" | "inline-size" | "min-block-size" | "min-inline-size" | "max-block-size" | "max-inline-size" | "justify-self" | "align-self" | "place-self" | "position-area", string>>;
export declare function applyTryTacticToBlock(rules: InsetRules, tactic: PositionTryOptionsTryTactics): Partial<Record<"height" | "width" | "left" | "top" | "bottom" | "inset" | "margin" | "right" | "position-anchor" | "inset-block-start" | "inset-block-end" | "inset-inline-start" | "inset-inline-end" | "inset-block" | "inset-inline" | "margin-block-start" | "margin-block-end" | "margin-block" | "margin-inline-start" | "margin-inline-end" | "margin-inline" | "margin-bottom" | "margin-left" | "margin-right" | "margin-top" | "min-width" | "min-height" | "max-width" | "max-height" | "block-size" | "inline-size" | "min-block-size" | "min-inline-size" | "max-block-size" | "max-inline-size" | "justify-self" | "align-self" | "place-self" | "position-area", string>>;
export declare function getPositionTryDeclaration(node: csstree.Declaration): {
    order?: PositionTryOrder;
    options?: PositionTryObject[];
};
export declare function getPositionFallbackValues(node: csstree.Declaration): {
    order?: PositionTryOrder;
    options?: PositionTryObject[];
};
export declare function isAcceptedPositionTryProperty(declaration: csstree.Declaration): boolean;
export declare function getPositionTryRules(node: csstree.Atrule): {
    name: string;
    tryBlock: TryBlock;
} | {
    name?: undefined;
    tryBlock?: undefined;
};
export declare function parsePositionFallbacks(styleData: StyleData[]): {
    fallbackTargets: FallbackTargets;
    validPositions: AnchorPositions;
};
export {};
